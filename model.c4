model {
    member = actor {
        title "Member"
        description 'A member of the Makerspace'
    }

    anonymous = actor {
        title "Anonymous"
        description 'An unauthenticated user with no known identity'
        style {
            color muted
        }
    }

    trustee = actor {
        title "Trustee"
        description 'Adminstrator of the Makerspace'
        style {
            color green
        }
    }

    softwareSystem = softwareSystem {
        title "Software System"

        style {
            opacity 25%
        }

        wordpress = softwareSystem {
            title "Marketing site"
            technology 'Wordpress, PHP'

            style {
                shape browser
            }

            -> wordpressDb "Reads/writes"
        }


        wordpressDb = database {
            title "Wordpress Data"
            technology 'MySQL'
        }
       

        apache -> wordpress "Routes requests"
        apache -> wiki "Routes requests"
        apache -> crm "Routes requests"

        wiki = softwareSystem {
            title "Wiki"
            technology 'MediaWiki, PHP'

            style {
                shape browser
            }
        }

        wikiDb = database {
            title "Wiki Data"
            technology 'MySQL'
        }

        mysql = database {
            title "MySQL"
            description 'Datastore for Wiki/CRM'
        }

        redis = database {
            title "Redis"
        }

        crm = softwareSystem {
            title "CRM UI"
            link https://github.com/MakerSpaceLeiden/makerspaceleiden-crm
            technology "Django"
            description 'Customer Relationship Management'
            style {
                shape browser
            }
        }

        crmApi = softwareSystem {
            title "CRM API"
            link https://github.com/MakerSpaceLeiden/makerspaceleiden-crm
            technology "Django REST Framework"
        }

        apache = softwareSystem {
            title "Server and Reverse Proxy"
            technology 'Apache'
        }

        nodeRed = softwareSystem {
            title "NodeRed"
            description 'Flow control for the Makerspace'
        }

        aggregator = softwareSystem {
            title "Aggregator"
            link https://github.com/MakerSpaceLeiden/aggregator
            technology 'Python'
            description 'Periodically collates data from the Makerspace'
        }

        mqttBroker = softwareSystem {
            title "MQTT Broker"
            technology 'Mosquitto'
        }

        isItUp = container {
            title "Is It Up and email"
            technology 'scripts'
        }

        isItUp -> mqttBroker "Validate health"

        accessMaster = softwareSystem {
            title "Access Master"
            link https://github.com/MakerSpaceLeiden/AccesSystem/tree/master/Master
            technology 'Python'
            description 'Master access control system'
        }

        mrtg = softwareSystem {
            title "Multi Router Traffic Grapher"
            technology 'Perl'
            description 'Graphs monitoring data from the Makerspace'
        }

        wireguard = container {
            title "Wireguard"
            description "Tunnel to the Makerspace physical network"
        }

        homeAssistant = container {
            title "Home Assistant"
        }

        homeAssistantDashboard = container {
            title "Home Assistant Dashboard"
        }

        firewall = container {
            title "Firewall"
        }

        acNode = container {
            title "AC Node New"

            -> crmApi "HTTP API calls"
            -> mqttBroker
        }

        acNodeOld = container {
            title "AC Node Old"

            -> mqttBroker 
        }

        // Relationships between software systems

        crm -> mysql "Reads/writes"
        crmApi -> mysql "Reads/writes"
        wiki -> wikiDb "Reads/writes"

        crm -> emailSystem "Create/delete contacts"
        crm -> crmApi "HTTP API calls"
        aggregator -> mysql "Reads/writes"
        aggregator -> redis "Reads/writes"
        aggregator -> mqttBroker "Reads/writes"

        accessMaster -> crmApi "HTTP API calls"
        accessMaster -> mqttBroker "Reads"

        nodeRed -> mysql "Reads"
        nodeRed -> crmApi "HTTP API calls"

        crm -> nodeRed "Embedded via iframe"
        crm -> mrtg "Embedded via iframe"
        crm -> aggregator "Read data over HTTP endpoint"
        mrtg -> wireguard "Reads"

    }

    

    emailSystem = softwareSystem {
        title "Email Lists"
        technology 'Sympa'
        description 'Sympa SaaS'

        style {
            color muted
        }
    }
    

    // Relationships between actors and systems
    anonymous -> softwareSystem "Uses"
    trustee -> softwareSystem "Uses"
    member -> softwareSystem "Uses"

    // Relationships between containers
    homeAssistant -> mqttBroker "Reads"
    homeAssistantDashboard -> homeAssistant 

    // Anonymous
    anonymous -> apache "Reads"
    member -> apache "Read/Edit"
    trustee -> apache "Read/Edit"

    emailSystem -> trustee "Sends emails"
    emailSystem -> member "Sends emails"
}